
BTL_NMDKTM_DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d8  080047d8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080047e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  080047f4  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080047f4  0000614c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099da  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ee  00000000  00000000  0000fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00011310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b2  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015383  00000000  00000000  000124ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac87  00000000  00000000  0002783d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008809e  00000000  00000000  000324c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b90  00000000  00000000  000ba5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000bd138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800478c 	.word	0x0800478c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800478c 	.word	0x0800478c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b988 	b.w	8000e9c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	468e      	mov	lr, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	4688      	mov	r8, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d962      	bls.n	8000c80 <__udivmoddi4+0xdc>
 8000bba:	fab2 f682 	clz	r6, r2
 8000bbe:	b14e      	cbz	r6, 8000bd4 <__udivmoddi4+0x30>
 8000bc0:	f1c6 0320 	rsb	r3, r6, #32
 8000bc4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bcc:	40b7      	lsls	r7, r6
 8000bce:	ea43 0808 	orr.w	r8, r3, r8
 8000bd2:	40b4      	lsls	r4, r6
 8000bd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000be0:	0c23      	lsrs	r3, r4, #16
 8000be2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000be6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bea:	fb01 f20c 	mul.w	r2, r1, ip
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf8:	f080 80ea 	bcs.w	8000dd0 <__udivmoddi4+0x22c>
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f240 80e7 	bls.w	8000dd0 <__udivmoddi4+0x22c>
 8000c02:	3902      	subs	r1, #2
 8000c04:	443b      	add	r3, r7
 8000c06:	1a9a      	subs	r2, r3, r2
 8000c08:	b2a3      	uxth	r3, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c16:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1a:	459c      	cmp	ip, r3
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x8e>
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c24:	f080 80d6 	bcs.w	8000dd4 <__udivmoddi4+0x230>
 8000c28:	459c      	cmp	ip, r3
 8000c2a:	f240 80d3 	bls.w	8000dd4 <__udivmoddi4+0x230>
 8000c2e:	443b      	add	r3, r7
 8000c30:	3802      	subs	r0, #2
 8000c32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c36:	eba3 030c 	sub.w	r3, r3, ip
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11d      	cbz	r5, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40f3      	lsrs	r3, r6
 8000c40:	2200      	movs	r2, #0
 8000c42:	e9c5 3200 	strd	r3, r2, [r5]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d905      	bls.n	8000c5a <__udivmoddi4+0xb6>
 8000c4e:	b10d      	cbz	r5, 8000c54 <__udivmoddi4+0xb0>
 8000c50:	e9c5 0100 	strd	r0, r1, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4608      	mov	r0, r1
 8000c58:	e7f5      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c5a:	fab3 f183 	clz	r1, r3
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d146      	bne.n	8000cf0 <__udivmoddi4+0x14c>
 8000c62:	4573      	cmp	r3, lr
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xc8>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 8105 	bhi.w	8000e76 <__udivmoddi4+0x2d2>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4690      	mov	r8, r2
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0e5      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c7e:	e7e2      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f000 8090 	beq.w	8000da6 <__udivmoddi4+0x202>
 8000c86:	fab2 f682 	clz	r6, r2
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f040 80a4 	bne.w	8000dd8 <__udivmoddi4+0x234>
 8000c90:	1a8a      	subs	r2, r1, r2
 8000c92:	0c03      	lsrs	r3, r0, #16
 8000c94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	b2bc      	uxth	r4, r7
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ca2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb04 f20c 	mul.w	r2, r4, ip
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x11e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x11c>
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f200 80e0 	bhi.w	8000e80 <__udivmoddi4+0x2dc>
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ccc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cd0:	fb02 f404 	mul.w	r4, r2, r4
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x144>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x142>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f200 80ca 	bhi.w	8000e7a <__udivmoddi4+0x2d6>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	1b1b      	subs	r3, r3, r4
 8000cea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cf0:	f1c1 0620 	rsb	r6, r1, #32
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	fa0e f401 	lsl.w	r4, lr, r1
 8000d00:	fa20 f306 	lsr.w	r3, r0, r6
 8000d04:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d0c:	4323      	orrs	r3, r4
 8000d0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d12:	fa1f fc87 	uxth.w	ip, r7
 8000d16:	fbbe f0f9 	udiv	r0, lr, r9
 8000d1a:	0c1c      	lsrs	r4, r3, #16
 8000d1c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d20:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d24:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x1a0>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d36:	f080 809c 	bcs.w	8000e72 <__udivmoddi4+0x2ce>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8099 	bls.w	8000e72 <__udivmoddi4+0x2ce>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	eba4 040e 	sub.w	r4, r4, lr
 8000d48:	fa1f fe83 	uxth.w	lr, r3
 8000d4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d50:	fb09 4413 	mls	r4, r9, r3, r4
 8000d54:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d58:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1ce>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d66:	f080 8082 	bcs.w	8000e6e <__udivmoddi4+0x2ca>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d97f      	bls.n	8000e6e <__udivmoddi4+0x2ca>
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d7e:	4564      	cmp	r4, ip
 8000d80:	4673      	mov	r3, lr
 8000d82:	46e1      	mov	r9, ip
 8000d84:	d362      	bcc.n	8000e4c <__udivmoddi4+0x2a8>
 8000d86:	d05f      	beq.n	8000e48 <__udivmoddi4+0x2a4>
 8000d88:	b15d      	cbz	r5, 8000da2 <__udivmoddi4+0x1fe>
 8000d8a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d8e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d92:	fa04 f606 	lsl.w	r6, r4, r6
 8000d96:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9a:	431e      	orrs	r6, r3
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000da2:	2100      	movs	r1, #0
 8000da4:	e74f      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000da6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000daa:	0c01      	lsrs	r1, r0, #16
 8000dac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000db0:	b280      	uxth	r0, r0
 8000db2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000db6:	463b      	mov	r3, r7
 8000db8:	4638      	mov	r0, r7
 8000dba:	463c      	mov	r4, r7
 8000dbc:	46b8      	mov	r8, r7
 8000dbe:	46be      	mov	lr, r7
 8000dc0:	2620      	movs	r6, #32
 8000dc2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dc6:	eba2 0208 	sub.w	r2, r2, r8
 8000dca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dce:	e766      	b.n	8000c9e <__udivmoddi4+0xfa>
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	e718      	b.n	8000c06 <__udivmoddi4+0x62>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	e72c      	b.n	8000c32 <__udivmoddi4+0x8e>
 8000dd8:	f1c6 0220 	rsb	r2, r6, #32
 8000ddc:	fa2e f302 	lsr.w	r3, lr, r2
 8000de0:	40b7      	lsls	r7, r6
 8000de2:	40b1      	lsls	r1, r6
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	430a      	orrs	r2, r1
 8000dee:	fbb3 f8fe 	udiv	r8, r3, lr
 8000df2:	b2bc      	uxth	r4, r7
 8000df4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df8:	0c11      	lsrs	r1, r2, #16
 8000dfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfe:	fb08 f904 	mul.w	r9, r8, r4
 8000e02:	40b0      	lsls	r0, r6
 8000e04:	4589      	cmp	r9, r1
 8000e06:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e0a:	b280      	uxth	r0, r0
 8000e0c:	d93e      	bls.n	8000e8c <__udivmoddi4+0x2e8>
 8000e0e:	1879      	adds	r1, r7, r1
 8000e10:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e14:	d201      	bcs.n	8000e1a <__udivmoddi4+0x276>
 8000e16:	4589      	cmp	r9, r1
 8000e18:	d81f      	bhi.n	8000e5a <__udivmoddi4+0x2b6>
 8000e1a:	eba1 0109 	sub.w	r1, r1, r9
 8000e1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e22:	fb09 f804 	mul.w	r8, r9, r4
 8000e26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e2a:	b292      	uxth	r2, r2
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	4542      	cmp	r2, r8
 8000e32:	d229      	bcs.n	8000e88 <__udivmoddi4+0x2e4>
 8000e34:	18ba      	adds	r2, r7, r2
 8000e36:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e3a:	d2c4      	bcs.n	8000dc6 <__udivmoddi4+0x222>
 8000e3c:	4542      	cmp	r2, r8
 8000e3e:	d2c2      	bcs.n	8000dc6 <__udivmoddi4+0x222>
 8000e40:	f1a9 0102 	sub.w	r1, r9, #2
 8000e44:	443a      	add	r2, r7
 8000e46:	e7be      	b.n	8000dc6 <__udivmoddi4+0x222>
 8000e48:	45f0      	cmp	r8, lr
 8000e4a:	d29d      	bcs.n	8000d88 <__udivmoddi4+0x1e4>
 8000e4c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e50:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e54:	3801      	subs	r0, #1
 8000e56:	46e1      	mov	r9, ip
 8000e58:	e796      	b.n	8000d88 <__udivmoddi4+0x1e4>
 8000e5a:	eba7 0909 	sub.w	r9, r7, r9
 8000e5e:	4449      	add	r1, r9
 8000e60:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e64:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e68:	fb09 f804 	mul.w	r8, r9, r4
 8000e6c:	e7db      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e6e:	4673      	mov	r3, lr
 8000e70:	e77f      	b.n	8000d72 <__udivmoddi4+0x1ce>
 8000e72:	4650      	mov	r0, sl
 8000e74:	e766      	b.n	8000d44 <__udivmoddi4+0x1a0>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e6fd      	b.n	8000c76 <__udivmoddi4+0xd2>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3a02      	subs	r2, #2
 8000e7e:	e733      	b.n	8000ce8 <__udivmoddi4+0x144>
 8000e80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e84:	443b      	add	r3, r7
 8000e86:	e71c      	b.n	8000cc2 <__udivmoddi4+0x11e>
 8000e88:	4649      	mov	r1, r9
 8000e8a:	e79c      	b.n	8000dc6 <__udivmoddi4+0x222>
 8000e8c:	eba1 0109 	sub.w	r1, r1, r9
 8000e90:	46c4      	mov	ip, r8
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	e7c4      	b.n	8000e26 <__udivmoddi4+0x282>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <HAL_TIM_IC_CaptureCallback>:
uint8_t Is_First_Captured = 0;  	// Co bat canh len hay canh xuong
float Distance = 0;  				// Khoang cach do duoc


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1b      	ldrb	r3, [r3, #28]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 8082 	bne.w	8000fb6 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured == 0)
 8000eb2:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11a      	bne.n	8000ef0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f002 ff5f 	bl	8003d80 <HAL_TIM_ReadCapturedValue>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a41      	ldr	r2, [pc, #260]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ec6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // Co bao bat duoc xung 1
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
			// doi bat tu canh len -> canh xuong
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 020a 	bic.w	r2, r2, #10
 8000edc:	621a      	str	r2, [r3, #32]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0202 	orr.w	r2, r2, #2
 8000eec:	621a      	str	r2, [r3, #32]
			// doi bat tu canh len -> canh xuong
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000eee:	e062      	b.n	8000fb6 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d15e      	bne.n	8000fb6 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f002 ff40 	bl	8003d80 <HAL_TIM_ReadCapturedValue>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f04:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8000f0e:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d907      	bls.n	8000f2a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e00f      	b.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d909      	bls.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f44:	33ff      	adds	r3, #255	@ 0xff
 8000f46:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f48:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa84 	bl	800045c <__aeabi_ui2d>
 8000f54:	a31a      	add	r3, pc, #104	@ (adr r3, 8000fc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff faf9 	bl	8000550 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f6e:	f7ff fc19 	bl	80007a4 <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fdab 	bl	8000ad4 <__aeabi_d2f>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f82:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 020a 	bic.w	r2, r2, #10
 8000f98:	621a      	str	r2, [r3, #32]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a12      	ldr	r2, [r2, #32]
 8000fa4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0202 	bic.w	r2, r2, #2
 8000fb4:	60da      	str	r2, [r3, #12]
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	b020c49c 	.word	0xb020c49c
 8000fc4:	3fa16872 	.word	0x3fa16872
 8000fc8:	20000040 	.word	0x20000040
 8000fcc:	20000034 	.word	0x20000034
 8000fd0:	20000038 	.word	0x20000038
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	20000044 	.word	0x20000044
 8000fdc:	20000068 	.word	0x20000068

08000fe0 <Delay>:

//Tao xung 10us
void Delay(uint32_t time)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <Delay+0x2c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000ff0:	bf00      	nop
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <Delay+0x2c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d8f9      	bhi.n	8000ff2 <Delay+0x12>
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000068 	.word	0x20000068

08001010 <HCSR05_GetDis>:

// Hàm đo khoảng cách bằng cảm biến HC-SR05
float HCSR05_GetDis(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <HCSR05_GetDis+0x3c>)
 800101a:	f001 fbed 	bl	80027f8 <HAL_GPIO_WritePin>
	Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff ffde 	bl	8000fe0 <Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	4808      	ldr	r0, [pc, #32]	@ (800104c <HCSR05_GetDis+0x3c>)
 800102a:	f001 fbe5 	bl	80027f8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); // Bat ngat de do k/c
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HCSR05_GetDis+0x40>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HCSR05_GetDis+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0202 	orr.w	r2, r2, #2
 800103c:	60da      	str	r2, [r3, #12]
	return Distance;
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HCSR05_GetDis+0x44>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	ee07 3a90 	vmov	s15, r3
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	20000068 	.word	0x20000068
 8001054:	20000044 	.word	0x20000044

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800105c:	f001 f8a0 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f84a 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f9e8 	bl	8001438 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001068:	f000 f8ae 	bl	80011c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800106c:	f000 f920 	bl	80012b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001070:	f000 f994 	bl	800139c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // HCSR05 ECHO
 8001074:	2100      	movs	r1, #0
 8001076:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <main+0x88>)
 8001078:	f002 fa52 	bl	8003520 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // L298N ENA (PA15)
 800107c:	2100      	movs	r1, #0
 800107e:	4819      	ldr	r0, [pc, #100]	@ (80010e4 <main+0x8c>)
 8001080:	f002 f944 	bl	800330c <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);   // L298N IN3
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
  HAL_TIM_Base_Start_IT(&htim3); // Thoi gian dieu khien he thong
 8001084:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <main+0x90>)
 8001086:	f002 f885 	bl	8003194 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Dis = HCSR05_GetDis();
 800108a:	f7ff ffc1 	bl	8001010 <HCSR05_GetDis>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <main+0x94>)
 8001094:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(200);
 8001098:	20c8      	movs	r0, #200	@ 0xc8
 800109a:	f001 f8f3 	bl	8002284 <HAL_Delay>
	  flag = 1;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <main+0x98>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
	  docao = 14.8 - Dis;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <main+0x94>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9f9 	bl	80004a0 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	a109      	add	r1, pc, #36	@ (adr r1, 80010d8 <main+0x80>)
 80010b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b8:	f7ff f892 	bl	80001e0 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd06 	bl	8000ad4 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <main+0x9c>)
 80010cc:	6013      	str	r3, [r2, #0]
	  Dis = HCSR05_GetDis();
 80010ce:	bf00      	nop
 80010d0:	e7db      	b.n	800108a <main+0x32>
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	402d9999 	.word	0x402d9999
 80010e0:	20000068 	.word	0x20000068
 80010e4:	200000b0 	.word	0x200000b0
 80010e8:	200000f8 	.word	0x200000f8
 80010ec:	20000140 	.word	0x20000140
 80010f0:	2000005c 	.word	0x2000005c
 80010f4:	20000144 	.word	0x20000144

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fb14 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <SystemClock_Config+0xcc>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fb55 	bl	800282c <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 fea2 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2103      	movs	r1, #3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fdb7 	bl	8002d1c <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b4:	f000 fe8c 	bl	8001ed0 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	@ 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 80011f4:	4a2d      	ldr	r2, [pc, #180]	@ (80012ac <MX_TIM1_Init+0xe4>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 80011fa:	2263      	movs	r2, #99	@ 0x63
 80011fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 8001206:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800120a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121e:	4822      	ldr	r0, [pc, #136]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 8001220:	f001 ff68 	bl	80030f4 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800122a:	f000 fe51 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4619      	mov	r1, r3
 800123a:	481b      	ldr	r0, [pc, #108]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 800123c:	f002 fcd8 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001246:	f000 fe43 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800124a:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 800124c:	f002 f90e 	bl	800346c <HAL_TIM_IC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001256:	f000 fe3b 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 800126a:	f003 f9e1 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001274:	f000 fe2c 	bl	8001ed0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM1_Init+0xe0>)
 8001290:	f002 fb50 	bl	8003934 <HAL_TIM_IC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800129a:	f000 fe19 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000068 	.word	0x20000068
 80012ac:	40010000 	.word	0x40010000

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <MX_TIM2_Init+0xe8>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <MX_TIM2_Init+0xe8>)
 80012ea:	2263      	movs	r2, #99	@ 0x63
 80012ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <MX_TIM2_Init+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <MX_TIM2_Init+0xe8>)
 80012f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <MX_TIM2_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <MX_TIM2_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	4823      	ldr	r0, [pc, #140]	@ (8001398 <MX_TIM2_Init+0xe8>)
 800130a:	f001 fef3 	bl	80030f4 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 fddc 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001322:	4619      	mov	r1, r3
 8001324:	481c      	ldr	r0, [pc, #112]	@ (8001398 <MX_TIM2_Init+0xe8>)
 8001326:	f002 fc63 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001330:	f000 fdce 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001334:	4818      	ldr	r0, [pc, #96]	@ (8001398 <MX_TIM2_Init+0xe8>)
 8001336:	f001 ff8f 	bl	8003258 <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001340:	f000 fdc6 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4619      	mov	r1, r3
 8001352:	4811      	ldr	r0, [pc, #68]	@ (8001398 <MX_TIM2_Init+0xe8>)
 8001354:	f003 f96c 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800135e:	f000 fdb7 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <MX_TIM2_Init+0xe8>)
 800137a:	f002 fb77 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001384:	f000 fda4 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <MX_TIM2_Init+0xe8>)
 800138a:	f000 fe51 	bl	8002030 <HAL_TIM_MspPostInit>

}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	@ 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000b0 	.word	0x200000b0

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001434 <MX_TIM3_Init+0x98>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013c0:	2263      	movs	r2, #99	@ 0x63
 80013c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013de:	4814      	ldr	r0, [pc, #80]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013e0:	f001 fe88 	bl	80030f4 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 fd71 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_TIM3_Init+0x94>)
 80013fc:	f002 fbf8 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 fd63 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_TIM3_Init+0x94>)
 8001418:	f003 f90a 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001422:	f000 fd55 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000f8 	.word	0x200000f8
 8001434:	40000400 	.word	0x40000400

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a2f      	ldr	r2, [pc, #188]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <MX_GPIO_Init+0xdc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <MX_GPIO_Init+0xdc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_GPIO_Init+0xdc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_GPIO_Init+0xdc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <MX_GPIO_Init+0xdc>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_GPIO_Init+0xdc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR05_TRIG_GPIO_Port, HCSR05_TRIG_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	4815      	ldr	r0, [pc, #84]	@ (8001518 <MX_GPIO_Init+0xe0>)
 80014c4:	f001 f998 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298N_IN3_Pin|L298N_IN4_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2128      	movs	r1, #40	@ 0x28
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_GPIO_Init+0xe4>)
 80014ce:	f001 f993 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HCSR05_TRIG_Pin */
  GPIO_InitStruct.Pin = HCSR05_TRIG_Pin;
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCSR05_TRIG_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480b      	ldr	r0, [pc, #44]	@ (8001518 <MX_GPIO_Init+0xe0>)
 80014ea:	f001 f801 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L298N_IN3_Pin L298N_IN4_Pin */
  GPIO_InitStruct.Pin = L298N_IN3_Pin|L298N_IN4_Pin;
 80014ee:	2328      	movs	r3, #40	@ 0x28
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_GPIO_Init+0xe4>)
 8001506:	f000 fff3 	bl	80024f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40020400 	.word	0x40020400

08001520 <fuzzyController>:

y=TS/MS
 */

float fuzzyController(float a, float b)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	ed2d 8b02 	vpush	{d8}
 8001526:	b0c8      	sub	sp, #288	@ 0x120
 8001528:	af00      	add	r7, sp, #0
 800152a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800152e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001532:	ed83 0a00 	vstr	s0, [r3]
 8001536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800153a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800153e:	edc3 0a00 	vstr	s1, [r3]
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 8001542:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001546:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800154a:	ed9f 2a65 	vldr	s4, [pc, #404]	@ 80016e0 <fuzzyController+0x1c0>
 800154e:	eefd 1a00 	vmov.f32	s3, #208	@ 0xbe800000 -0.250
 8001552:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 8001556:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 800155a:	ed93 0a00 	vldr	s0, [r3]
 800155e:	f000 f9f1 	bl	8001944 <hlt_hinhthang>
 8001562:	eef0 7a40 	vmov.f32	s15, s0
 8001566:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
 800156a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800156e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001572:	eddf 1a5c 	vldr	s3, [pc, #368]	@ 80016e4 <fuzzyController+0x1c4>
 8001576:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 80016e0 <fuzzyController+0x1c0>
 800157a:	eefd 0a00 	vmov.f32	s1, #208	@ 0xbe800000 -0.250
 800157e:	ed93 0a00 	vldr	s0, [r3]
 8001582:	f000 fa63 	bl	8001a4c <hlt_tamgiac>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
 800158a:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
 800158e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001592:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001596:	eddf 1a54 	vldr	s3, [pc, #336]	@ 80016e8 <fuzzyController+0x1c8>
 800159a:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80016e4 <fuzzyController+0x1c4>
 800159e:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80016e0 <fuzzyController+0x1c0>
 80015a2:	ed93 0a00 	vldr	s0, [r3]
 80015a6:	f000 fa51 	bl	8001a4c <hlt_tamgiac>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
    		hlt_tamgiac(a,0,0.1,0.25),hlt_hinhthang(a,0.1,0.25,1,2)};
 80015b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015ba:	eef5 1a00 	vmov.f32	s3, #80	@ 0x3e800000  0.250
 80015be:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80016e8 <fuzzyController+0x1c8>
 80015c2:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80016e4 <fuzzyController+0x1c4>
 80015c6:	ed93 0a00 	vldr	s0, [r3]
 80015ca:	f000 fa3f 	bl	8001a4c <hlt_tamgiac>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 80015d2:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
    		hlt_tamgiac(a,0,0.1,0.25),hlt_hinhthang(a,0.1,0.25,1,2)};
 80015d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015de:	eeb0 2a00 	vmov.f32	s4, #0	@ 0x40000000  2.0
 80015e2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80015e6:	eeb5 1a00 	vmov.f32	s2, #80	@ 0x3e800000  0.250
 80015ea:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80016e8 <fuzzyController+0x1c8>
 80015ee:	ed93 0a00 	vldr	s0, [r3]
 80015f2:	f000 f9a7 	bl	8001944 <hlt_hinhthang>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 80015fa:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110

    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 80015fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001602:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001606:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 80016ec <fuzzyController+0x1cc>
 800160a:	eddf 1a39 	vldr	s3, [pc, #228]	@ 80016f0 <fuzzyController+0x1d0>
 800160e:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 8001612:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 8001616:	ed93 0a00 	vldr	s0, [r3]
 800161a:	f000 f993 	bl	8001944 <hlt_hinhthang>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
 8001626:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800162a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800162e:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 80016e4 <fuzzyController+0x1c4>
 8001632:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80016ec <fuzzyController+0x1cc>
 8001636:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80016f0 <fuzzyController+0x1d0>
 800163a:	ed93 0a00 	vldr	s0, [r3]
 800163e:	f000 fa05 	bl	8001a4c <hlt_tamgiac>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
 800164a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800164e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001652:	eddf 1a28 	vldr	s3, [pc, #160]	@ 80016f4 <fuzzyController+0x1d4>
 8001656:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80016e4 <fuzzyController+0x1c4>
 800165a:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80016ec <fuzzyController+0x1cc>
 800165e:	ed93 0a00 	vldr	s0, [r3]
 8001662:	f000 f9f3 	bl	8001a4c <hlt_tamgiac>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
    		hlt_tamgiac(b,0,0.2,0.3),hlt_hinhthang(b,0.2,0.3,1,2)};
 800166e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001672:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001676:	eddf 1a20 	vldr	s3, [pc, #128]	@ 80016f8 <fuzzyController+0x1d8>
 800167a:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 80016f4 <fuzzyController+0x1d4>
 800167e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80016e4 <fuzzyController+0x1c4>
 8001682:	ed93 0a00 	vldr	s0, [r3]
 8001686:	f000 f9e1 	bl	8001a4c <hlt_tamgiac>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 800168e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
    		hlt_tamgiac(b,0,0.2,0.3),hlt_hinhthang(b,0.2,0.3,1,2)};
 8001692:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001696:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800169a:	eeb0 2a00 	vmov.f32	s4, #0	@ 0x40000000  2.0
 800169e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80016a2:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80016f8 <fuzzyController+0x1d8>
 80016a6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80016f4 <fuzzyController+0x1d4>
 80016aa:	ed93 0a00 	vldr	s0, [r3]
 80016ae:	f000 f949 	bl	8001944 <hlt_hinhthang>
 80016b2:	eef0 7a40 	vmov.f32	s15, s0
    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 80016b6:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    float y[]={-100,-40,-20,0,30,70,100};
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <fuzzyController+0x1dc>)
 80016bc:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 80016c0:	461d      	mov	r5, r3
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    float beta[5][5];
    for (int i = 0; i < 5; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016d4:	e04b      	b.n	800176e <fuzzyController+0x24e>
    {
     for (int j = 0; j < 5 ;j++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80016dc:	e03e      	b.n	800175c <fuzzyController+0x23c>
 80016de:	bf00      	nop
 80016e0:	bdcccccd 	.word	0xbdcccccd
 80016e4:	00000000 	.word	0x00000000
 80016e8:	3dcccccd 	.word	0x3dcccccd
 80016ec:	be4ccccd 	.word	0xbe4ccccd
 80016f0:	be99999a 	.word	0xbe99999a
 80016f4:	3e4ccccd 	.word	0x3e4ccccd
 80016f8:	3e99999a 	.word	0x3e99999a
 80016fc:	080047a4 	.word	0x080047a4
     {
       beta[i][j]= MIN(e[i],edot[j]);
 8001700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800170a:	443b      	add	r3, r7
 800170c:	3b20      	subs	r3, #32
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800171c:	443b      	add	r3, r7
 800171e:	3b34      	subs	r3, #52	@ 0x34
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	eef0 0a47 	vmov.f32	s1, s14
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	f000 fa38 	bl	8001ba0 <MIN>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800174a:	443b      	add	r3, r7
 800174c:	3bb4      	subs	r3, #180	@ 0xb4
 800174e:	edc3 7a00 	vstr	s15, [r3]
     for (int j = 0; j < 5 ;j++)
 8001752:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001756:	3301      	adds	r3, #1
 8001758:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800175c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001760:	2b04      	cmp	r3, #4
 8001762:	ddcd      	ble.n	8001700 <fuzzyController+0x1e0>
    for (int i = 0; i < 5; i++)
 8001764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800176e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001772:	2b04      	cmp	r3, #4
 8001774:	ddaf      	ble.n	80016d6 <fuzzyController+0x1b6>
     }
    }

    float NB[] = {beta[e_NB][edot_NB],beta[e_NB][edot_NS],beta[e_NS][edot_NB]};
 8001776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001778:	663b      	str	r3, [r7, #96]	@ 0x60
 800177a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800177c:	667b      	str	r3, [r7, #100]	@ 0x64
 800177e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001782:	66bb      	str	r3, [r7, #104]	@ 0x68
    float NM[] = {beta[e_NB][edot_ZE],beta[e_NS][edot_NS],beta[e_ZE][edot_NB]};
 8001784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001786:	657b      	str	r3, [r7, #84]	@ 0x54
 8001788:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800178e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001792:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float NS[] = {beta[e_NB][edot_PS],beta[e_NS][edot_ZE],beta[e_ZE][edot_NS],beta[e_PS][edot_NB]};
 8001794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001796:	647b      	str	r3, [r7, #68]	@ 0x44
 8001798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800179e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017a8:	653b      	str	r3, [r7, #80]	@ 0x50
    float ZE[] = {beta[e_NB][edot_PB],beta[e_NS][edot_PS],beta[e_ZE][edot_ZE],beta[e_PS][edot_NS],beta[e_PB][edot_NB]};
 80017aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80017b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017c4:	643b      	str	r3, [r7, #64]	@ 0x40
    float PS[] = {beta[e_NS][edot_PB],beta[e_ZE][edot_PS],beta[e_PS][edot_ZE],beta[e_PB][edot_NS]};
 80017c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80017ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80017d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80017e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80017f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017fc:	60da      	str	r2, [r3, #12]
    float PM[] = {beta[e_ZE][edot_PB],beta[e_PS][edot_PS],beta[e_PB][edot_ZE]};
 80017fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001810:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001814:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800181e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001822:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001826:	609a      	str	r2, [r3, #8]
    float PB[] = {beta[e_PB][edot_PB],beta[e_PB][edot_PS],beta[e_PS][edot_PB]};
 8001828:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800182c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001830:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800183a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800183e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001848:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800184c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001850:	609a      	str	r2, [r3, #8]

    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 8001852:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8001856:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800185a:	2103      	movs	r1, #3
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f9b9 	bl	8001bd8 <rule>
 8001866:	eeb0 8a40 	vmov.f32	s16, s0
 800186a:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 800186e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001872:	2103      	movs	r1, #3
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f9ad 	bl	8001bd8 <rule>
 800187e:	eef0 7a40 	vmov.f32	s15, s0
 8001882:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001886:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 800188a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800188e:	2104      	movs	r1, #4
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f99f 	bl	8001bd8 <rule>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	ee38 8a27 	vadd.f32	s16, s16, s15
 80018a2:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80018a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018aa:	2105      	movs	r1, #5
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f991 	bl	8001bd8 <rule>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
 80018ba:	ee38 8a27 	vadd.f32	s16, s16, s15
    		rule(PS,y[y_PS],4)+rule(PM,y[y_PM],3)+rule(PB,y[y_PB],3))/sum_array(beta,5,5); //
 80018be:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	2104      	movs	r1, #4
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f983 	bl	8001bd8 <rule>
 80018d2:	eef0 7a40 	vmov.f32	s15, s0
    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 80018d6:	ee38 8a27 	vadd.f32	s16, s16, s15
    		rule(PS,y[y_PS],4)+rule(PM,y[y_PM],3)+rule(PB,y[y_PB],3))/sum_array(beta,5,5); //
 80018da:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2103      	movs	r1, #3
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f975 	bl	8001bd8 <rule>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80018f6:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	2103      	movs	r1, #3
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f967 	bl	8001bd8 <rule>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
 800190e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001912:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001916:	2205      	movs	r2, #5
 8001918:	2105      	movs	r1, #5
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f904 	bl	8001b28 <sum_array>
 8001920:	eeb0 7a40 	vmov.f32	s14, s0
    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 8001924:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001928:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
    return ans;
 800192c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001930:	ee07 3a90 	vmov	s15, r3
}
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800193c:	46bd      	mov	sp, r7
 800193e:	ecbd 8b02 	vpop	{d8}
 8001942:	bdb0      	pop	{r4, r5, r7, pc}

08001944 <hlt_hinhthang>:

float hlt_hinhthang(float data, float l, float cl, float cr, float r)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	ed87 0a05 	vstr	s0, [r7, #20]
 800194e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001952:	ed87 1a03 	vstr	s2, [r7, #12]
 8001956:	edc7 1a02 	vstr	s3, [r7, #8]
 800195a:	ed87 2a01 	vstr	s4, [r7, #4]
    if ((data < l)   && (data >= r)) return 0;
 800195e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001962:	edd7 7a04 	vldr	s15, [r7, #16]
 8001966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	d50b      	bpl.n	8001988 <hlt_hinhthang+0x44>
 8001970:	ed97 7a05 	vldr	s14, [r7, #20]
 8001974:	edd7 7a01 	vldr	s15, [r7, #4]
 8001978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	db02      	blt.n	8001988 <hlt_hinhthang+0x44>
 8001982:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001a48 <hlt_hinhthang+0x104>
 8001986:	e058      	b.n	8001a3a <hlt_hinhthang+0xf6>
    if ((data >= l)  && (data < cl)) return (data - l)/(cl - l);
 8001988:	ed97 7a05 	vldr	s14, [r7, #20]
 800198c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	db17      	blt.n	80019ca <hlt_hinhthang+0x86>
 800199a:	ed97 7a05 	vldr	s14, [r7, #20]
 800199e:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	d50e      	bpl.n	80019ca <hlt_hinhthang+0x86>
 80019ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c8:	e037      	b.n	8001a3a <hlt_hinhthang+0xf6>
    if ((data >= cl) && (data < cr)) return 1;
 80019ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	db0b      	blt.n	80019f4 <hlt_hinhthang+0xb0>
 80019dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d502      	bpl.n	80019f4 <hlt_hinhthang+0xb0>
 80019ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80019f2:	e022      	b.n	8001a3a <hlt_hinhthang+0xf6>
    if ((data >= cr) && (data < r))  return (r - data)/(r - cr);
 80019f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	db17      	blt.n	8001a36 <hlt_hinhthang+0xf2>
 8001a06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d50e      	bpl.n	8001a36 <hlt_hinhthang+0xf2>
 8001a18:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a24:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a34:	e001      	b.n	8001a3a <hlt_hinhthang+0xf6>
    return 0;
 8001a36:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8001a48 <hlt_hinhthang+0x104>
}
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	00000000 	.word	0x00000000

08001a4c <hlt_tamgiac>:


float hlt_tamgiac(float data,float l,float m, float r)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a56:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a5a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001a5e:	edc7 1a00 	vstr	s3, [r7]
    if ((data < l)  || (data >= r)) return 0;
 8001a62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d408      	bmi.n	8001a86 <hlt_tamgiac+0x3a>
 8001a74:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a78:	edd7 7a00 	vldr	s15, [r7]
 8001a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	db02      	blt.n	8001a8c <hlt_tamgiac+0x40>
 8001a86:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001b24 <hlt_tamgiac+0xd8>
 8001a8a:	e043      	b.n	8001b14 <hlt_tamgiac+0xc8>
    if ((data >= l) && (data < m))  return (data - l)/(m - l);
 8001a8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	db17      	blt.n	8001ace <hlt_tamgiac+0x82>
 8001a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d50e      	bpl.n	8001ace <hlt_tamgiac+0x82>
 8001ab0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ab4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ac0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001acc:	e022      	b.n	8001b14 <hlt_tamgiac+0xc8>
    if ((data >= m) && (data < r))  return (r - data)/(r - m);
 8001ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	db17      	blt.n	8001b10 <hlt_tamgiac+0xc4>
 8001ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae4:	edd7 7a00 	vldr	s15, [r7]
 8001ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d50e      	bpl.n	8001b10 <hlt_tamgiac+0xc4>
 8001af2:	ed97 7a00 	vldr	s14, [r7]
 8001af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001afe:	ed97 7a00 	vldr	s14, [r7]
 8001b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0e:	e001      	b.n	8001b14 <hlt_tamgiac+0xc8>
    return 0;
 8001b10:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8001b24 <hlt_tamgiac+0xd8>
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	00000000 	.word	0x00000000

08001b28 <sum_array>:

// Tinh tong theo cong thuc trung binh co trong so
float sum_array (float data[][5],char n, char m)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	4613      	mov	r3, r2
 8001b36:	70bb      	strb	r3, [r7, #2]
    float s=0;
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
    for (int i =0; i < n; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	e01f      	b.n	8001b84 <sum_array+0x5c>
    {
     for (int j=0; j<m; j++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e015      	b.n	8001b76 <sum_array+0x4e>
     {
       s += data[i][j];
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	441a      	add	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	edc7 7a05 	vstr	s15, [r7, #20]
     for (int j=0; j<m; j++)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	78bb      	ldrb	r3, [r7, #2]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbe5      	blt.n	8001b4a <sum_array+0x22>
    for (int i =0; i < n; i++)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3301      	adds	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbdb      	blt.n	8001b44 <sum_array+0x1c>
     }
    }
    return s;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	ee07 3a90 	vmov	s15, r3
}
 8001b92:	eeb0 0a67 	vmov.f32	s0, s15
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <MIN>:


float MIN(float a,float b)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001baa:	edc7 0a00 	vstr	s1, [r7]
    if (a < b) return a;
 8001bae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb2:	edd7 7a00 	vldr	s15, [r7]
 8001bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d501      	bpl.n	8001bc4 <MIN+0x24>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	e000      	b.n	8001bc6 <MIN+0x26>
    else return b;
 8001bc4:	683b      	ldr	r3, [r7, #0]
}
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb0 0a67 	vmov.f32	s0, s15
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <rule>:


float rule(float data[],float val,char n)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001be4:	460b      	mov	r3, r1
 8001be6:	71fb      	strb	r3, [r7, #7]
    float s = 0;
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e012      	b.n	8001c1a <rule+0x42>
    {
     s += data[i]*val;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c10:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < n; i++)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbe8      	blt.n	8001bf4 <rule+0x1c>
    }
    return s;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	ee07 3a90 	vmov	s15, r3
}
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <Saturation>:

//Ham chuan hoa cac gia tri -1<x<1
float Saturation(float x)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x >= 1)
 8001c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db03      	blt.n	8001c5c <Saturation+0x24>
		x = 1;
 8001c54:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e00a      	b.n	8001c72 <Saturation+0x3a>
	else if(x <= -1)
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d801      	bhi.n	8001c72 <Saturation+0x3a>
		x = -1;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <Saturation+0x50>)
 8001c70:	607b      	str	r3, [r7, #4]
	return x;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	ee07 3a90 	vmov	s15, r3
}
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	bf800000 	.word	0xbf800000

08001c8c <Motor_Control>:

void Motor_Control(int32_t pwmValue) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    if (pwmValue > 0) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dd0a      	ble.n	8001cb0 <Motor_Control+0x24>
        // Bom
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);   // L298N IN3
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <Motor_Control+0x48>)
 8001ca0:	f000 fdaa 	bl	80027f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	480a      	ldr	r0, [pc, #40]	@ (8001cd4 <Motor_Control+0x48>)
 8001caa:	f000 fda5 	bl	80027f8 <HAL_GPIO_WritePin>
 8001cae:	e009      	b.n	8001cc4 <Motor_Control+0x38>
    } else {
        // Dung Bom
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // L298N IN3
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <Motor_Control+0x48>)
 8001cb6:	f000 fd9f 	bl	80027f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <Motor_Control+0x48>)
 8001cc0:	f000 fd9a 	bl	80027f8 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmValue);
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <Motor_Control+0x4c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	200000b0 	.word	0x200000b0
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <HAL_TIM_PeriodElapsedCallback>:

/*
 Thoi gian dieu khien cua chuong trinh la 200ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	ed2d 8b02 	vpush	{d8}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) // Kiểm tra nếu là timer 3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	f040 80c5 	bne.w	8001e82 <HAL_TIM_PeriodElapsedCallback+0x1a2>
    {
//    	Dis = HCSR05_GetDis();
//      Delay(200000); // 200ms
    	//HAL_Delay(200);
    	if (flag){
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80bd 	beq.w	8001e7c <HAL_TIM_PeriodElapsedCallback+0x19c>

    	e_k1 = e_k;
 8001d02:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a69      	ldr	r2, [pc, #420]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d08:	6013      	str	r3, [r2, #0]
    	e_k = point - (TANK_HEIGHT - Dis);
 8001d0a:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbc6 	bl	80004a0 <__aeabi_f2d>
 8001d14:	4604      	mov	r4, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbbf 	bl	80004a0 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	a15a      	add	r1, pc, #360	@ (adr r1, 8001e90 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d2c:	f7fe fa58 	bl	80001e0 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fa52 	bl	80001e0 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe fec6 	bl	8000ad4 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d4c:	6013      	str	r3, [r2, #0]
    	e_dot = (e_k - e_k1)/0.2;
 8001d4e:	4b56      	ldr	r3, [pc, #344]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b55      	ldr	r3, [pc, #340]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fb9d 	bl	80004a0 <__aeabi_f2d>
 8001d66:	a34c      	add	r3, pc, #304	@ (adr r3, 8001e98 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fd1a 	bl	80007a4 <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe feac 	bl	8000ad4 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001d80:	6013      	str	r3, [r2, #0]

    	e_k_input = e_k*K1;
 8001d82:	4b49      	ldr	r3, [pc, #292]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb8a 	bl	80004a0 <__aeabi_f2d>
 8001d8c:	a340      	add	r3, pc, #256	@ (adr r3, 8001e90 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fd07 	bl	80007a4 <__aeabi_ddiv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe fe99 	bl	8000ad4 <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001da6:	6013      	str	r3, [r2, #0]
    	e_k_dot_input = e_dot*K2;
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	4b42      	ldr	r3, [pc, #264]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]

    	pwmValue += (0.2*fuzzyController(Saturation(e_k_input), Saturation(e_k_dot_input)));  //Thay vi xuat ra % cong suat r cho ku = 1000 thì xuat thang ra gia tri cua pwm
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	f7ff ff36 	bl	8001c38 <Saturation>
 8001dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	f7ff ff2d 	bl	8001c38 <Saturation>
 8001dde:	eef0 7a40 	vmov.f32	s15, s0
 8001de2:	eef0 0a67 	vmov.f32	s1, s15
 8001de6:	eeb0 0a48 	vmov.f32	s0, s16
 8001dea:	f7ff fb99 	bl	8001520 <fuzzyController>
 8001dee:	ee10 3a10 	vmov	r3, s0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb54 	bl	80004a0 <__aeabi_f2d>
 8001df8:	a327      	add	r3, pc, #156	@ (adr r3, 8001e98 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fba7 	bl	8000550 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe f9e8 	bl	80001e4 <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	492b      	ldr	r1, [pc, #172]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]

    	if (pwmValue >= 900)
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001e2a:	f7fe fe17 	bl	8000a5c <__aeabi_dcmpge>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x160>
    		pwmValue = 900;
 8001e34:	4924      	ldr	r1, [pc, #144]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]
    	if (pwmValue < 0)
 8001e40:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f7fe fdf1 	bl	8000a34 <__aeabi_dcmplt>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x186>
    		pwmValue = 0;
 8001e58:	491b      	ldr	r1, [pc, #108]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]

    	Motor_Control((int32_t)pwmValue);
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe08 	bl	8000a84 <__aeabi_d2iz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff08 	bl	8001c8c <Motor_Control>
    	}
    	flag = 0;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    }
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	ecbd 8b02 	vpop	{d8}
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	9999999a 	.word	0x9999999a
 8001e94:	402d9999 	.word	0x402d9999
 8001e98:	9999999a 	.word	0x9999999a
 8001e9c:	3fc99999 	.word	0x3fc99999
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	2000005c 	.word	0x2000005c
 8001ea8:	20000048 	.word	0x20000048
 8001eac:	20000050 	.word	0x20000050
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000140 	.word	0x20000140
 8001eb8:	2000004c 	.word	0x2000004c
 8001ebc:	20000054 	.word	0x20000054
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	20000058 	.word	0x20000058
 8001ec8:	20000060 	.word	0x20000060
 8001ecc:	408c2000 	.word	0x408c2000

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <Error_Handler+0x8>

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	@ 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <HAL_TIM_Base_MspInit+0xf4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d135      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a33      	ldr	r2, [pc, #204]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a2c      	ldr	r2, [pc, #176]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4821      	ldr	r0, [pc, #132]	@ (8002028 <HAL_TIM_Base_MspInit+0xfc>)
 8001fa4:	f000 faa4 	bl	80024f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	201b      	movs	r0, #27
 8001fae:	f000 fa68 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fb2:	201b      	movs	r0, #27
 8001fb4:	f000 fa81 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fb8:	e02e      	b.n	8002018 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc2:	d10e      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
}
 8001fe0:	e01a      	b.n	8002018 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_TIM_Base_MspInit+0x100>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d115      	bne.n	8002018 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	201d      	movs	r0, #29
 800200e:	f000 fa38 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002012:	201d      	movs	r0, #29
 8002014:	f000 fa51 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	@ 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010000 	.word	0x40010000
 8002024:	40023800 	.word	0x40023800
 8002028:	40021000 	.word	0x40021000
 800202c:	40000400 	.word	0x40000400

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002050:	d11e      	bne.n	8002090 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_TIM_MspPostInit+0x68>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a0f      	ldr	r2, [pc, #60]	@ (8002098 <HAL_TIM_MspPostInit+0x68>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_TIM_MspPostInit+0x68>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800206e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002080:	2301      	movs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4804      	ldr	r0, [pc, #16]	@ (800209c <HAL_TIM_MspPostInit+0x6c>)
 800208c:	f000 fa30 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <MemManage_Handler+0x4>

080020b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f000 f8a5 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM1_CC_IRQHandler+0x10>)
 8002106:	f001 fb25 	bl	8003754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000068 	.word	0x20000068

08002114 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <TIM3_IRQHandler+0x10>)
 800211a:	f001 fb1b 	bl	8003754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000f8 	.word	0x200000f8

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002184 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002150:	f7ff ffea 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800216c:	4c0a      	ldr	r4, [pc, #40]	@ (8002198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217a:	f002 fae3 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7fe ff6b 	bl	8001058 <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002190:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 8002194:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002198:	2000014c 	.word	0x2000014c

0800219c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f94f 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fe82 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f967 	bl	80024d6 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 f92f 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000008 	.word	0x20000008
 800223c:	20000010 	.word	0x20000010
 8002240:	2000000c 	.word	0x2000000c

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000010 	.word	0x20000010
 8002268:	20000148 	.word	0x20000148

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000148 	.word	0x20000148

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000010 	.word	0x20000010

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	@ (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e159      	b.n	80027c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8148 	bne.w	80027ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a2 	beq.w	80027ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002684:	6453      	str	r3, [r2, #68]	@ 0x44
 8002686:	4b54      	ldr	r3, [pc, #336]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_GPIO_Init+0x2ec>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a49      	ldr	r2, [pc, #292]	@ (80027e0 <HAL_GPIO_Init+0x2f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x202>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a48      	ldr	r2, [pc, #288]	@ (80027e4 <HAL_GPIO_Init+0x2f4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x1fe>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a47      	ldr	r2, [pc, #284]	@ (80027e8 <HAL_GPIO_Init+0x2f8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x1fa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a46      	ldr	r2, [pc, #280]	@ (80027ec <HAL_GPIO_Init+0x2fc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x1f6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a45      	ldr	r2, [pc, #276]	@ (80027f0 <HAL_GPIO_Init+0x300>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x1f2>
 80026de:	2304      	movs	r3, #4
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	@ (80027dc <HAL_GPIO_Init+0x2ec>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a2f      	ldr	r2, [pc, #188]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f aea2 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e267      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d075      	beq.n	8002936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d00c      	beq.n	8002870 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002856:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800285e:	2b08      	cmp	r3, #8
 8002860:	d112      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002862:	4b82      	ldr	r3, [pc, #520]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	4b7e      	ldr	r3, [pc, #504]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05b      	beq.n	8002934 <HAL_RCC_OscConfig+0x108>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d157      	bne.n	8002934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e242      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x74>
 8002892:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a75      	ldr	r2, [pc, #468]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x98>
 80028aa:	4b70      	ldr	r3, [pc, #448]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6f      	ldr	r2, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6c      	ldr	r2, [pc, #432]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028c4:	4b69      	ldr	r3, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a68      	ldr	r2, [pc, #416]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b66      	ldr	r3, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a65      	ldr	r2, [pc, #404]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fcc2 	bl	800226c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fcbe 	bl	800226c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	@ 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e207      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xc0>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fcae 	bl	800226c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fcaa 	bl	800226c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	@ 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1f3      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b51      	ldr	r3, [pc, #324]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0xe8>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002942:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x152>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1c7      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4937      	ldr	r1, [pc, #220]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_RCC_OscConfig+0x244>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7ff fc63 	bl	800226c <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff fc5f 	bl	800226c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1a8      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4925      	ldr	r1, [pc, #148]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_OscConfig+0x244>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff fc42 	bl	800226c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff fc3e 	bl	800226c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e187      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_RCC_OscConfig+0x248>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7ff fc22 	bl	800226c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fc1e 	bl	800226c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e167      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x200>
 8002a4a:	e01b      	b.n	8002a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_OscConfig+0x248>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7ff fc0b 	bl	800226c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	e00e      	b.n	8002a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fc07 	bl	800226c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d907      	bls.n	8002a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e150      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	42470000 	.word	0x42470000
 8002a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b88      	ldr	r3, [pc, #544]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ea      	bne.n	8002a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8097 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b81      	ldr	r3, [pc, #516]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b77      	ldr	r3, [pc, #476]	@ (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b74      	ldr	r3, [pc, #464]	@ (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a73      	ldr	r2, [pc, #460]	@ (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7ff fbc7 	bl	800226c <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7ff fbc3 	bl	800226c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e10c      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2ea>
 8002b08:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0c:	4a63      	ldr	r2, [pc, #396]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b14:	e01c      	b.n	8002b50 <HAL_RCC_OscConfig+0x324>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x30c>
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	4a5e      	ldr	r2, [pc, #376]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0x324>
 8002b38:	4b58      	ldr	r3, [pc, #352]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a57      	ldr	r2, [pc, #348]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b44:	4b55      	ldr	r3, [pc, #340]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	4a54      	ldr	r2, [pc, #336]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff fb88 	bl	800226c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7ff fb84 	bl	800226c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0cb      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	4b49      	ldr	r3, [pc, #292]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ee      	beq.n	8002b60 <HAL_RCC_OscConfig+0x334>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7ff fb72 	bl	800226c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7ff fb6e 	bl	800226c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0b5      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ee      	bne.n	8002b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	4a38      	ldr	r2, [pc, #224]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a1 	beq.w	8002d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d05c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d141      	bne.n	8002c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7ff fb42 	bl	800226c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7ff fb3e 	bl	800226c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e087      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	491b      	ldr	r1, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fb17 	bl	800226c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7ff fb13 	bl	800226c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e05c      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x416>
 8002c60:	e054      	b.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb00 	bl	800226c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff fafc 	bl	800226c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e045      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x444>
 8002c8e:	e03d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e038      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <HAL_RCC_OscConfig+0x4ec>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d121      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d11a      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cc      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b68      	ldr	r3, [pc, #416]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d90c      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b65      	ldr	r3, [pc, #404]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b63      	ldr	r3, [pc, #396]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0b8      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d70:	4b59      	ldr	r3, [pc, #356]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a58      	ldr	r2, [pc, #352]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d88:	4b53      	ldr	r3, [pc, #332]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b50      	ldr	r3, [pc, #320]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	494d      	ldr	r1, [pc, #308]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d044      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b47      	ldr	r3, [pc, #284]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e067      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b37      	ldr	r3, [pc, #220]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4934      	ldr	r1, [pc, #208]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fa2e 	bl	800226c <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff fa2a 	bl	800226c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d20c      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b20      	ldr	r3, [pc, #128]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e032      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4916      	ldr	r1, [pc, #88]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	490e      	ldr	r1, [pc, #56]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea2:	f000 f821 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	490a      	ldr	r1, [pc, #40]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	5ccb      	ldrb	r3, [r1, r3]
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a09      	ldr	r2, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f98e 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	080047c0 	.word	0x080047c0
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b094      	sub	sp, #80	@ 0x50
 8002eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f00:	4b79      	ldr	r3, [pc, #484]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d00d      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	f200 80e1 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x34>
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f1a:	e0db      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4b73      	ldr	r3, [pc, #460]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f20:	e0db      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f22:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f26:	e0d8      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f32:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f52:	2300      	movs	r3, #0
 8002f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4621      	mov	r1, r4
 8002f74:	1a51      	subs	r1, r2, r1
 8002f76:	6139      	str	r1, [r7, #16]
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	018b      	lsls	r3, r1, #6
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f96:	4651      	mov	r1, sl
 8002f98:	018a      	lsls	r2, r1, #6
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fba:	4690      	mov	r8, r2
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb18 0303 	adds.w	r3, r8, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	eb49 0303 	adc.w	r3, r9, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	024b      	lsls	r3, r1, #9
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	024a      	lsls	r2, r1, #9
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fee:	2200      	movs	r2, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff8:	f7fd fdbc 	bl	8000b74 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003004:	e058      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	4618      	mov	r0, r3
 8003010:	4611      	mov	r1, r2
 8003012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003032:	0150      	lsls	r0, r2, #5
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4641      	mov	r1, r8
 800303a:	ebb2 0a01 	subs.w	sl, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb63 0b01 	sbc.w	fp, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003058:	ebb2 040a 	subs.w	r4, r2, sl
 800305c:	eb63 050b 	sbc.w	r5, r3, fp
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	00eb      	lsls	r3, r5, #3
 800306a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306e:	00e2      	lsls	r2, r4, #3
 8003070:	4614      	mov	r4, r2
 8003072:	461d      	mov	r5, r3
 8003074:	4643      	mov	r3, r8
 8003076:	18e3      	adds	r3, r4, r3
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	464b      	mov	r3, r9
 800307c:	eb45 0303 	adc.w	r3, r5, r3
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308e:	4629      	mov	r1, r5
 8003090:	028b      	lsls	r3, r1, #10
 8003092:	4621      	mov	r1, r4
 8003094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003098:	4621      	mov	r1, r4
 800309a:	028a      	lsls	r2, r1, #10
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a2:	2200      	movs	r2, #0
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	61fa      	str	r2, [r7, #28]
 80030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ac:	f7fd fd62 	bl	8000b74 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x204>)
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3750      	adds	r7, #80	@ 0x50
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e041      	b.n	800318a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe ff06 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fe86 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e044      	b.n	8003236 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003244 <HAL_TIM_Base_Start_IT+0xb0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x6c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d6:	d013      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x6c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <HAL_TIM_Base_Start_IT+0xb4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x6c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_TIM_Base_Start_IT+0xb8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x6c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <HAL_TIM_Base_Start_IT+0xbc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x6c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <HAL_TIM_Base_Start_IT+0xc0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d010      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003222:	e007      	b.n	8003234 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000

08003258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f839 	bl	80032f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fdd4 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_TIM_PWM_Start+0x24>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e022      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d109      	bne.n	800334a <HAL_TIM_PWM_Start+0x3e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e015      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d109      	bne.n	8003364 <HAL_TIM_PWM_Start+0x58>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e008      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e068      	b.n	8003450 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0x82>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800338c:	e013      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0x92>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ac:	e003      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f910 	bl	80045e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <HAL_TIM_PWM_Start+0x14c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d107      	bne.n	80033de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <HAL_TIM_PWM_Start+0x14c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f0:	d013      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_TIM_PWM_Start+0x150>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_TIM_PWM_Start+0x154>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	@ (8003464 <HAL_TIM_PWM_Start+0x158>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <HAL_TIM_PWM_Start+0x15c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d010      	beq.n	800344e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e007      	b.n	800344e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40010000 	.word	0x40010000
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40014000 	.word	0x40014000

0800346c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f839 	bl	800350a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fcca 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <HAL_TIM_IC_Start_IT+0x1e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e013      	b.n	8003566 <HAL_TIM_IC_Start_IT+0x46>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d104      	bne.n	800354e <HAL_TIM_IC_Start_IT+0x2e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e00b      	b.n	8003566 <HAL_TIM_IC_Start_IT+0x46>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d104      	bne.n	800355e <HAL_TIM_IC_Start_IT+0x3e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e003      	b.n	8003566 <HAL_TIM_IC_Start_IT+0x46>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_TIM_IC_Start_IT+0x58>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e013      	b.n	80035a0 <HAL_TIM_IC_Start_IT+0x80>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d104      	bne.n	8003588 <HAL_TIM_IC_Start_IT+0x68>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e00b      	b.n	80035a0 <HAL_TIM_IC_Start_IT+0x80>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b08      	cmp	r3, #8
 800358c:	d104      	bne.n	8003598 <HAL_TIM_IC_Start_IT+0x78>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e003      	b.n	80035a0 <HAL_TIM_IC_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a2:	7bbb      	ldrb	r3, [r7, #14]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035a8:	7b7b      	ldrb	r3, [r7, #13]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0c2      	b.n	8003738 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_IC_Start_IT+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c0:	e013      	b.n	80035ea <HAL_TIM_IC_Start_IT+0xca>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_IC_Start_IT+0xb2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_IC_Start_IT+0xca>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_IC_Start_IT+0xc2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e0:	e003      	b.n	80035ea <HAL_TIM_IC_Start_IT+0xca>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0xda>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f8:	e013      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x102>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0xea>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003608:	e00b      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x102>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Start_IT+0xfa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	e003      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x102>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d841      	bhi.n	80036ac <HAL_TIM_IC_Start_IT+0x18c>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_TIM_IC_Start_IT+0x110>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003665 	.word	0x08003665
 8003634:	080036ad 	.word	0x080036ad
 8003638:	080036ad 	.word	0x080036ad
 800363c:	080036ad 	.word	0x080036ad
 8003640:	08003677 	.word	0x08003677
 8003644:	080036ad 	.word	0x080036ad
 8003648:	080036ad 	.word	0x080036ad
 800364c:	080036ad 	.word	0x080036ad
 8003650:	08003689 	.word	0x08003689
 8003654:	080036ad 	.word	0x080036ad
 8003658:	080036ad 	.word	0x080036ad
 800365c:	080036ad 	.word	0x080036ad
 8003660:	0800369b 	.word	0x0800369b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0202 	orr.w	r2, r2, #2
 8003672:	60da      	str	r2, [r3, #12]
      break;
 8003674:	e01d      	b.n	80036b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0204 	orr.w	r2, r2, #4
 8003684:	60da      	str	r2, [r3, #12]
      break;
 8003686:	e014      	b.n	80036b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	60da      	str	r2, [r3, #12]
      break;
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0210 	orr.w	r2, r2, #16
 80036a8:	60da      	str	r2, [r3, #12]
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13e      	bne.n	8003736 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff8f 	bl	80045e4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_TIM_IC_Start_IT+0x220>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x1e2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d013      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x1e2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <HAL_TIM_IC_Start_IT+0x224>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00e      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x1e2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <HAL_TIM_IC_Start_IT+0x228>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x1e2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a16      	ldr	r2, [pc, #88]	@ (800374c <HAL_TIM_IC_Start_IT+0x22c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x1e2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <HAL_TIM_IC_Start_IT+0x230>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d010      	beq.n	8003736 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	e007      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40014000 	.word	0x40014000

08003754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d020      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01b      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0202 	mvn.w	r2, #2
 8003788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fb7e 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fb2e 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb35 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d020      	beq.n	8003804 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0204 	mvn.w	r2, #4
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fb58 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fb08 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb0f 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d020      	beq.n	8003850 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0208 	mvn.w	r2, #8
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2204      	movs	r2, #4
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fb32 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fae2 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fae9 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d020      	beq.n	800389c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0210 	mvn.w	r2, #16
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2208      	movs	r2, #8
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fb0c 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fabc 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fac3 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0201 	mvn.w	r2, #1
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe fa10 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 ff1e 	bl	8004720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa94 	bl	8003e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0220 	mvn.w	r2, #32
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fef0 	bl	800470c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_TIM_IC_ConfigChannel+0x1e>
 800394e:	2302      	movs	r3, #2
 8003950:	e088      	b.n	8003a64 <HAL_TIM_IC_ConfigChannel+0x130>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003970:	f000 fc80 	bl	8004274 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020c 	bic.w	r2, r2, #12
 8003982:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
 8003996:	e060      	b.n	8003a5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d11c      	bne.n	80039d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80039ae:	f000 fcf8 	bl	80043a2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80039c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6999      	ldr	r1, [r3, #24]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	021a      	lsls	r2, r3, #8
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	619a      	str	r2, [r3, #24]
 80039d6:	e040      	b.n	8003a5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039ee:	f000 fd45 	bl	800447c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 020c 	bic.w	r2, r2, #12
 8003a00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	61da      	str	r2, [r3, #28]
 8003a14:	e021      	b.n	8003a5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0c      	cmp	r3, #12
 8003a1a:	d11c      	bne.n	8003a56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a2c:	f000 fd62 	bl	80044f4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69d9      	ldr	r1, [r3, #28]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	021a      	lsls	r2, r3, #8
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	61da      	str	r2, [r3, #28]
 8003a54:	e001      	b.n	8003a5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0ae      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	f200 809f 	bhi.w	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003bd9 	.word	0x08003bd9
 8003aa8:	08003bd9 	.word	0x08003bd9
 8003aac:	08003bd9 	.word	0x08003bd9
 8003ab0:	08003b15 	.word	0x08003b15
 8003ab4:	08003bd9 	.word	0x08003bd9
 8003ab8:	08003bd9 	.word	0x08003bd9
 8003abc:	08003bd9 	.word	0x08003bd9
 8003ac0:	08003b57 	.word	0x08003b57
 8003ac4:	08003bd9 	.word	0x08003bd9
 8003ac8:	08003bd9 	.word	0x08003bd9
 8003acc:	08003bd9 	.word	0x08003bd9
 8003ad0:	08003b97 	.word	0x08003b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa3e 	bl	8003f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
      break;
 8003b12:	e064      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa84 	bl	8004028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e043      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 facf 	bl	8004100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0208 	orr.w	r2, r2, #8
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
      break;
 8003b94:	e023      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fb19 	bl	80041d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_ConfigClockSource+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0b4      	b.n	8003d76 <HAL_TIM_ConfigClockSource+0x186>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c44:	d03e      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4a:	f200 8087 	bhi.w	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c52:	f000 8086 	beq.w	8003d62 <HAL_TIM_ConfigClockSource+0x172>
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5a:	d87f      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b70      	cmp	r3, #112	@ 0x70
 8003c5e:	d01a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0xa6>
 8003c60:	2b70      	cmp	r3, #112	@ 0x70
 8003c62:	d87b      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b60      	cmp	r3, #96	@ 0x60
 8003c66:	d050      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x11a>
 8003c68:	2b60      	cmp	r3, #96	@ 0x60
 8003c6a:	d877      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b50      	cmp	r3, #80	@ 0x50
 8003c6e:	d03c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xfa>
 8003c70:	2b50      	cmp	r3, #80	@ 0x50
 8003c72:	d873      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d058      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x13a>
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d86f      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b30      	cmp	r3, #48	@ 0x30
 8003c7e:	d064      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	2b30      	cmp	r3, #48	@ 0x30
 8003c82:	d86b      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d060      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d867      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d05a      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c94:	e062      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	f000 fc7d 	bl	80045a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	609a      	str	r2, [r3, #8]
      break;
 8003cc2:	e04f      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	f000 fc66 	bl	80045a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce6:	609a      	str	r2, [r3, #8]
      break;
 8003ce8:	e03c      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fb24 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2150      	movs	r1, #80	@ 0x50
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fc33 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003d08:	e02c      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d16:	461a      	mov	r2, r3
 8003d18:	f000 fb80 	bl	800441c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2160      	movs	r1, #96	@ 0x60
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc23 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003d28:	e01c      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 fb04 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2140      	movs	r1, #64	@ 0x40
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc13 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003d48:	e00c      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f000 fc0a 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003d5a:	e003      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	e000      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d831      	bhi.n	8003df8 <HAL_TIM_ReadCapturedValue+0x78>
 8003d94:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003df9 	.word	0x08003df9
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003df9 	.word	0x08003df9
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003df9 	.word	0x08003df9
 8003dcc:	08003def 	.word	0x08003def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	60fb      	str	r3, [r7, #12]

      break;
 8003dd8:	e00f      	b.n	8003dfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	60fb      	str	r3, [r7, #12]

      break;
 8003de2:	e00a      	b.n	8003dfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	60fb      	str	r3, [r7, #12]

      break;
 8003dec:	e005      	b.n	8003dfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	60fb      	str	r3, [r7, #12]

      break;
 8003df6:	e000      	b.n	8003dfa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003df8:	bf00      	nop
  }

  return tmpreg;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	@ (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a37      	ldr	r2, [pc, #220]	@ (8003f44 <TIM_Base_SetConfig+0x100>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a36      	ldr	r2, [pc, #216]	@ (8003f48 <TIM_Base_SetConfig+0x104>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a35      	ldr	r2, [pc, #212]	@ (8003f4c <TIM_Base_SetConfig+0x108>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01b      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d017      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	@ (8003f44 <TIM_Base_SetConfig+0x100>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a27      	ldr	r2, [pc, #156]	@ (8003f48 <TIM_Base_SetConfig+0x104>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <TIM_Base_SetConfig+0x108>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <TIM_Base_SetConfig+0x10c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a24      	ldr	r2, [pc, #144]	@ (8003f54 <TIM_Base_SetConfig+0x110>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	@ (8003f58 <TIM_Base_SetConfig+0x114>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d103      	bne.n	8003f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]
  }
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0201 	bic.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 0302 	bic.w	r3, r3, #2
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <TIM_OC1_SetConfig+0xc8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10c      	bne.n	8003fd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0308 	bic.w	r3, r3, #8
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <TIM_OC1_SetConfig+0xc8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d111      	bne.n	8003ffe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40010000 	.word	0x40010000

08004028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0210 	bic.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0320 	bic.w	r3, r3, #32
 8004072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <TIM_OC2_SetConfig+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d10d      	bne.n	80040a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a15      	ldr	r2, [pc, #84]	@ (80040fc <TIM_OC2_SetConfig+0xd4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d113      	bne.n	80040d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000

08004100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <TIM_OC3_SetConfig+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10d      	bne.n	800417a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a14      	ldr	r2, [pc, #80]	@ (80041d0 <TIM_OC3_SetConfig+0xd0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d113      	bne.n	80041aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000

080041d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800421e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a10      	ldr	r2, [pc, #64]	@ (8004270 <TIM_OC4_SetConfig+0x9c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d109      	bne.n	8004248 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000

08004274 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f023 0201 	bic.w	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a24      	ldr	r2, [pc, #144]	@ (8004330 <TIM_TI1_SetConfig+0xbc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_TI1_SetConfig+0x56>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d00f      	beq.n	80042ca <TIM_TI1_SetConfig+0x56>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <TIM_TI1_SetConfig+0xc0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_TI1_SetConfig+0x56>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a20      	ldr	r2, [pc, #128]	@ (8004338 <TIM_TI1_SetConfig+0xc4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_TI1_SetConfig+0x56>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <TIM_TI1_SetConfig+0xc8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_TI1_SetConfig+0x56>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <TIM_TI1_SetConfig+0xcc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <TIM_TI1_SetConfig+0x5a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <TIM_TI1_SetConfig+0x5c>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e003      	b.n	80042ee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 030a 	and.w	r3, r3, #10
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40014000 	.word	0x40014000

08004344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0201 	bic.w	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 030a 	bic.w	r3, r3, #10
 8004380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0210 	bic.w	r2, r3, #16
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	031b      	lsls	r3, r3, #12
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f023 0303 	bic.w	r3, r3, #3
 80044a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004520:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004532:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	031b      	lsls	r3, r3, #12
 8004538:	b29b      	uxth	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004546:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	f043 0307 	orr.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2201      	movs	r2, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e050      	b.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004694:	d013      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a16      	ldr	r2, [pc, #88]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a13      	ldr	r2, [pc, #76]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40014000 	.word	0x40014000

0800470c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <memset>:
 8004734:	4402      	add	r2, r0
 8004736:	4603      	mov	r3, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	@ (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	@ (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	@ (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	@ (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f818 	bl	800478c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	080047d8 	.word	0x080047d8
 8004780:	080047d8 	.word	0x080047d8
 8004784:	080047d8 	.word	0x080047d8
 8004788:	080047dc 	.word	0x080047dc

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
